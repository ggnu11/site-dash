---
description: 
globs: 
alwaysApply: false
---
# .cursor/rules

# 🧠 기본 전제
- 안쓰는 함수나 import는 제거해주세요.
- 모든 컴포넌트는 React + TypeScript로 작성해주세요.
- props 및 상태는 명확한 타입 정의(TypeScript interface or zod schema)로 구성해주세요.
- 컴포넌트는 가능한 재사용 가능하고 SRP(Single Responsibility Principle)를 지켜주세요.
- 폴더 구조는 FSD(Feature-Sliced Design) 아키텍처 방식을 기반으로 구성해주세요.

# 🎨 스타일 관련
- 스타일은 Tailwind CSS로 구성해주세요.
- 조건부 클래스는 clsx 또는 tailwind-merge를 사용해주세요.
- 애니메이션은 framer-motion으로 작성해주세요.

# 🧩 UI 구성
- UI 컴포넌트는 가능한 Radix UI 및 shadcn/ui 기반으로 구성해주세요.
- 아이콘은 lucide-react를 사용해주세요.

# 🪝 상태 관리
- 글로벌 상태는 zustand를 사용해서 관리해주세요.
- 상태 로직은 hooks 폴더에 useXXXStore 형태로 분리해주세요.

# 🧪 유효성 검사
- 입력값 검증에는 zod를 사용해주세요.
- 폼 구성 시 react-hook-form과 zod resolver를 함께 사용해주세요.

# 📁 폴더 구조
- components, hooks, stores, lib, types 등의 폴더를 기준으로 구성해주세요.
- 각 컴포넌트는 단일 파일이 아닌 폴더 단위(SFC pattern)로 관리해주세요.
  예) components/AlertDialog/index.tsx, style.ts, types.ts 형태

# ⚙️ 기타 규칙
- React 19 기준으로 작성해주세요 (use hook conventions 포함).
- strict mode 및 eslint/prettier 규칙은 프로젝트 설정을 따르세요.
- 파일 및 함수 네이밍은 카멜케이스로 통일해주세요.
- 백엔드 연동은 처음이니깐 이해하기 쉽도록 자세히 알려줘.

# 💡 컴포넌트 분리 및 코드 스플릿
- 각 기능별 컴포넌트는 독립된 폴더와 파일로 분리하여 관리해주세요.
- 컴포넌트가 너무 크거나 복잡해질 경우, UI 단위별(예: 버튼, 리스트 아이템, 모달 내부 컴포넌트 등)로 추가 파일로 분리하세요.
- 폴더 구조와 파일명은 FSD 방식을 유지하면서, 기능별로 명확히 구분해주세요.